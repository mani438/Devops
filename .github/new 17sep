name: PGQD CI-CD Pipeline

on:
  push:
    branches:
      - main
      - 5-helmchart-pgqd-nonprod
  workflow_dispatch:

jobs:
  build:
    name: Build PGQD Docker Image
    runs-on: ubuntu-22.04
    permissions:
      pull-requests: write
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Load Conjur Secrets
        id: conjur
        uses: ns-actions/docker-build-workflow/.github/workflows/workflow-emu.yml@v2.1.0
        with:
          secret_manager: conjur
          secret_manager_url: https://conjur-prod.cisco.com
          secret_map: |
            sto/sro-csco-github-actions/github-action-org-secrets/ARIFACTORY_DOCKER_USER:DOCKER_BUILD_SRC_REPO_USER,
            sto/sro-csco-github-actions/github-action-org-secrets/ARIFACTORY_STO_CCC_DOCKER_TOKEN:DOCKER_BUILD_SRC_REPO_TOKEN,
            sto/sro-csco-github-actions/github-action-org-secrets/ARIFACTORY_PGQD_DOCKER_TOKEN:DOCKER_BUILD_DST_REPO_TOKEN

      - name: Build Docker Image
        id: meta
        run: |
          set -eo pipefail
          IMAGE_TAG=$(date +"%Y%m%d%H%M")
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "‚úÖ Built PGQD image with tag: $IMAGE_TAG"

  deploy:
    name: Deploy PGQD to OpenShift
    needs: build
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Load Conjur Secrets
        uses: ns-actions/docker-build-workflow/.github/workflows/workflow-emu.yml@v2.1.0
        with:
          secret_manager: conjur
          secret_manager_url: https://conjur-prod.cisco.com
          secret_map: |
            sto/sro-csco-github-actions/github-action-org-secrets/OPENSHIFT_SERVER:OPENSHIFT_SERVER,
            sto/sro-csco-github-actions/github-action-org-secrets/OPENSHIFT_SA_TOKEN:OPENSHIFT_SA_TOKEN,
            sto/sro-csco-github-actions/github-action-org-secrets/ARIFACTORY_USERNAME:ARIFACTORY_USERNAME,
            sto/sro-csco-github-actions/github-action-org-secrets/ARIFACTORY_PGOD_DOCKER_TOKEN:ARIFACTORY_PASSWORD

      - name: Login to OpenShift
        run: |
          echo "üîë Logging into OpenShift..."
          oc login --server="${{ secrets.OPENSHIFT_SERVER }}" --token="${{ secrets.OPENSHIFT_SA_TOKEN }}"

      - name: Set Namespace
        run: oc project psirt-pgqd-non-prod

      - name: Ensure Image Pull Secret
        run: |
          SECRET_NAME="artifactory-pgqd-docker-pull-secret"
          if ! oc get secret "$SECRET_NAME" -n psirt-pgqd-non-prod >/dev/null 2>&1; then
            oc create secret docker-registry "$SECRET_NAME" \
              --docker-server=artifactory.devhub-cloud.cisco.com \
              --docker-username="${{ secrets.ARIFACTORY_USERNAME }}" \
              --docker-password="${{ secrets.ARIFACTORY_PASSWORD }}" \
              -n psirt-pgqd-non-prod
          fi
          oc secrets link default "$SECRET_NAME" --for=pull -n psirt-pgqd-non-prod

      - name: Update Deployment with New Image
        run: |
          echo "üöÄ Updating pgqd deployment with new image..."
          NEW_IMAGE="artifactory.devhub-cloud.cisco.com/pgqd-docker:${{ needs.build.outputs.image_tag }}"
          oc set image deployment/pgqd pgqd=$NEW_IMAGE -n psirt-pgqd-non-prod
          oc rollout status deployment/pgqd -n psirt-pgqd-non-prod

      - name: Verify Deployment
        run: |
          echo "üîç Verifying pods in psirt-pgqd-non-prod..."
          oc get pods -n psirt-pgqd-non-prod -o wide

          for p in $(oc get pods -n psirt-pgqd-non-prod -l app=pgqd -o name); do
            STATUS=$(oc get "$p" -n psirt-pgqd-non-prod -o jsonpath="{.status.phase}")
            if [ "$STATUS" != "Running" ]; then
              echo "‚ö†Ô∏è Pod not running: $p"
              oc describe "$p" -n psirt-pgqd-non-prod
              oc logs "$p" -n psirt-pgqd-non-prod --tail=50
            fi
          done
