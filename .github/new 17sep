name: CI-CD Pipeline

on:
  push:
    branches:
      - main
      - 5-helmchart-pgqd-nonprod
  workflow_dispatch:

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-22.04
    permissions:
      pull-requests: write

    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Load Conjur Secrets
        id: conjur
        uses: ns-actions/docker-build-workflow/.github/workflows/workflow-emu.yml@v2.1.0
        with:
          secret_manager: conjur
          secret_manager_url: https://conjur-prod.cisco.com
          secret_map: |
            sto/sro-csco-github-actions/github-action-org-secrets/ARIFACTORY_DOCKER_USER:DOCKER_BUILD_SRC_REPO_USER,
            sto/sro-csco-github-actions/github-action-org-secrets/ARIFACTORY_STO_CCC_DOCKER_TOKEN:DOCKER_BUILD_SRC_REPO_TOKEN,
            sto/sro-csco-github-actions/github-action-org-secrets/ARIFACTORY_PGOD_DOCKER_TOKEN:DOCKER_BUILD_DST_REPO_TOKEN

      - name: Build Docker Image
        id: meta
        run: |
          set -eo pipefail
          IMAGE_TAG=$(date +"%Y%m%d%H%M")
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "‚úÖ Built image with tag: $IMAGE_TAG"

  deploy:
    name: Deploy to OpenShift (Dev)
    needs: build
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Load Conjur Secrets
        uses: ns-actions/docker-build-workflow/.github/workflows/workflow-emu.yml@v2.1.0
        with:
          secret_manager: conjur
          secret_manager_url: https://conjur-prod.cisco.com
          secret_map: |
            sto/sro-csco-github-actions/github-action-org-secrets/OPENSHIFT_SERVER:OPENSHIFT_SERVER,
            sto/sro-csco-github-actions/github-action-org-secrets/OPENSHIFT_SA_TOKEN:OPENSHIFT_SA_TOKEN,
            sto/sro-csco-github-actions/github-action-org-secrets/ARIFACTORY_USERNAME:ARIFACTORY_USERNAME,
            sto/sro-csco-github-actions/github-action-org-secrets/ARIFACTORY_PGOD_DOCKER_TOKEN:ARIFACTORY_PASSWORD

      - name: Login to OpenShift
        run: |
          echo "üîë Logging into OpenShift with ServiceAccount..."
          oc login --server="${{ secrets.OPENSHIFT_SERVER }}" --token="${{ secrets.OPENSHIFT_SA_TOKEN }}"

      - name: Set Project Namespace
        run: |
          oc project "dev"

      - name: Ensure Image Pull Secret Exists
        run: |
          IMAGE_PULL_SECRET="pgod-dev-pull-secret"
          if ! oc get secret "$IMAGE_PULL_SECRET" -n dev >/dev/null 2>&1; then
            oc create secret docker-registry "$IMAGE_PULL_SECRET" \
              --docker-server=artifactory.devhub-cloud.cisco.com \
              --docker-username="${{ secrets.ARIFACTORY_USERNAME }}" \
              --docker-password="${{ secrets.ARIFACTORY_PASSWORD }}" \
              -n dev
          fi
          oc secrets link default "$IMAGE_PULL_SECRET" --for=pull -n dev

      - name: Helm Lint + Dry Run
        run: |
          helm template pgod charts/pgod \
            --namespace dev \
            --set image.repository="artifactory.devhub-cloud.cisco.com/pgod",image.tag="${{ needs.build.outputs.image_tag }}" \
            --set imagePullSecrets[0].name="pgod-dev-pull-secret" \
            --set environment="dev"

      - name: Helm Upgrade & Deploy
        run: |
          helm upgrade --install pgod charts/pgod \
            --namespace dev --create-namespace \
            --set image.repository="artifactory.devhub-cloud.cisco.com/pgod",image.tag="${{ needs.build.outputs.image_tag }}" \
            --set imagePullSecrets[0].name="pgod-dev-pull-secret" \
            --set environment="dev" \
            --wait --timeout 5m --atomic

      - name: Verify Deployment
        run: |
          echo "üîç Checking rollout for pgod in dev..."
          oc rollout status -n dev deployment/pgod

          echo "üì¶ Pod Status:"
          oc get pods -n dev -o wide

          for p in $(oc get pods -n dev -l app.kubernetes.io/name=pgod -o name); do
            STATUS=$(oc get "$p" -n dev -o jsonpath="{.status.phase}")
            if [ "$STATUS" != "Running" ]; then
              echo "‚ö†Ô∏è Non-running pod: $p"
              oc describe "$p" -n dev
              oc logs "$p" -n dev --tail=50
            fi
          done
