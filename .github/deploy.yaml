name: Deploy PGQD to OpenShift

on:
  push:
    branches:
      - main  # or your desired branch

jobs:
  deploy:
    name: Deploy PGQD on OpenShift
    runs-on: ubuntu-latest

    env:
      NAMESPACE: psirt-pgqd-non-prod
      DEPLOYMENT_NAME: pgqd

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install OpenShift CLI
      - name: Install OpenShift CLI (oc)
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
          tar -xvf oc.tar.gz
          sudo mv oc /usr/local/bin/
          oc version --client

      # Login to OpenShift
      - name: Authenticate to OpenShift
        run: |
          oc login --token=${{ secrets.OPENSHIFT_TOKEN }} --server=${{ secrets.OPENSHIFT_SERVER }} --insecure-skip-tls-verify
          oc project ${{ env.NAMESPACE }}

      # Install Helm
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm version

      # Optional: Helm Chart Linting & Dry Run
      - name: Helm Lint & Dry Run
        run: |
          helm lint ./charts/pgqd
          helm template pgqd ./charts/pgqd --namespace ${{ env.HELM_NAMESPACE }}
          helm install pgqd ./charts/pgqd --namespace ${{ env.HELM_NAMESPACE }} --dry-run
          echo "Helm chart linting and dry-run completed."

      # Helm Install to OpenShift
      - name: Deploy PGQD using Helm on OpenShift
        run: |
          helm upgrade --install pgqd ./charts/pgqd \
            --namespace ${{ env.HELM_NAMESPACE }} \
            --create-namespace
          echo "PGQD Helm chart deployed successfully."

      # Apply deployment.yaml
      - name: Deploy PGQD to OpenShift
        run: |
          kubectl apply -f deployment.yaml -n ${{ env.NAMESPACE }}
          echo " Applied PGQD deployment manifest."

      # Wait for rollout to complete
      - name: Verify Deployment Rollout
        run: |
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }}

      # Verify pods are running
      - name: Verify Pods Status
        run: |
          echo "üîç Listing pods in namespace ${{ env.NAMESPACE }}:"
          kubectl get pods -n ${{ env.NAMESPACE }}

      # Success message
      - name: Deployment Success
        if: success()
        run: echo " PGQD deployment successful in namespace ${{ env.NAMESPACE }}."

      # Optional: Deployment failure notification
      - name: Deployment Failure
        if: failure()
        run: |
          echo " PGQD deployment failed."
          kubectl get events -n ${{ env.NAMESPACE }} --sort-by='.lastTimestamp'
