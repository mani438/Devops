name: Build & Deploy PGQD

on:
  push:
    branches: [ main, s-helm-chart-for-pgqd ]
  pull_request:
    branches: [ main, s-helm-chart-for-pgqd ]
  workflow_dispatch:

env:
  RELEASE: pgqd
  NAMESPACE: psirt-pgqd-non-prod
  CHART_PATH: ./psirt/pgqd/images/app/templates/deployment.yaml
  IMAGE_REPOSITORY: artifactory.devhub-cloud.cisco.com/pgqd-docker
  IMAGE_PULL_SECRET: artifactory-pgqd-docker-pull-secret
  ENVIRONMENT: dev

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      actions: read
      contents: write
      pull-requests: write
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set image tag
        id: meta
        run: |
          IMAGE_TAG="pgqd-$(date +'%Y%m%d%H%M%S')"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build Docker Image
        run: |
          echo "Building Docker image with tag: ${{ steps.meta.outputs.image_tag }}"
          docker build -t $IMAGE_REPOSITORY:${{ steps.meta.outputs.image_tag }} .

  deploy:
    name: Deploy to OpenShift
    needs: build
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Load Conjur Secrets
        uses: cyberark/conjur-action@v2
        with:
          conjur-url: https://conjur-prod.cisco.com
          conjur-account: cisco-prod
          authn-id: github-actions
          api-key: ${{ secrets.CONJUR_API_KEY }}
          secrets: |
            sto/sro-csco-github-actions/github-action-org-secrets/OPENSHIFT_SERVER:OPENSHIFT_SERVER
            sto/sro-csco-github-actions/github-action-org-secrets/OPENSHIFT_SA_TOKEN:OPENSHIFT_SA_TOKEN
            sto/sro-csco-github-actions/github-action-org-secrets/ARTIFACTORY_DOCKER_USER:ARTIFACTORY_USERNAME
            sto/sro-csco-github-actions/github-action-org-secrets/ARTIFACTORY_DOCKER_PASS:ARTIFACTORY_PASSWORD

      - name: Login to OpenShift
        run: |
          oc login --server="${OPENSHIFT_SERVER}" --token="${OPENSHIFT_SA_TOKEN}"
          oc project $NAMESPACE

      - name: Ensure imagePullSecret
        run: |
          if ! oc get secret $IMAGE_PULL_SECRET -n $NAMESPACE >/dev/null 2>&1; then
            oc create secret docker-registry $IMAGE_PULL_SECRET \
              --docker-server=artifactory.devhub-cloud.cisco.com \
              --docker-username="${ARTIFACTORY_USERNAME}" \
              --docker-password="${ARTIFACTORY_PASSWORD}" \
              -n $NAMESPACE
            oc secrets link default $IMAGE_PULL_SECRET --for=pull -n $NAMESPACE
          fi

      - name: Helm lint + dry-run
        run: |
          helm lint $CHART_PATH \
            --set image.repository=$IMAGE_REPOSITORY,image.tag=${{ needs.build.outputs.image_tag }}
          helm template $RELEASE $CHART_PATH \
            --namespace $NAMESPACE \
            --set image.repository=$IMAGE_REPOSITORY,image.tag=${{ needs.build.outputs.image_tag }} \
            --set imagePullSecrets[0].name=$IMAGE_PULL_SECRET \
            --set app.kubernetes.io/managed-by=north-star \
            --set app.kubernetes.io/name=pgqd \
            --set environment=$ENVIRONMENT | kubectl apply --dry-run=client -f -

      - name: Helm upgrade --install
        run: |
          helm upgrade --install $RELEASE $CHART_PATH \
            --namespace $NAMESPACE --create-namespace \
            --set image.repository=$IMAGE_REPOSITORY,image.tag=${{ needs.build.outputs.image_tag }} \
            --set imagePullSecrets[0].name=$IMAGE_PULL_SECRET \
            --set app.kubernetes.io/managed-by=north-star \
            --set app.kubernetes.io/name=pgqd \
            --set environment=$ENVIRONMENT \
            --wait --timeout 10m --atomic

      - name: Verify rollout
        run: |
          oc rollout status -n $NAMESPACE deploy/$RELEASE || true
          oc get deploy $RELEASE -n $NAMESPACE -o wide || true
          oc get pods -n $NAMESPACE -o wide || true
